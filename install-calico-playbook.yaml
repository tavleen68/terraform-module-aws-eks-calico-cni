---
- name: "Install Calico CNI on EKS using Kubernetes Manifest File"
  hosts: localhost
  vars:
    aws_eks_cluster_name: "{{ aws_eks_cluster_name }}"
    aws_account_id: "{{ aws_account_id }}"
    region: "{{ region }}"
  tasks:
    - name: "Execute the script to configure aws credentials to run kube commands"
      shell: |
        #!/bin/bash

        # Temporarily store the original credentials (optional)
        if [[ -n "$OLD_AWS_ACCESS_KEY_ID" && -n "$OLD_AWS_SECRET_ACCESS_KEY" ]]; then
          echo "Original credentials already stored. Skipping..."
        else
          # Capture existing credentials (if not already stored in OLD_ variables)
          OLD_AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
          OLD_AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
          OLD_AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"
          export OLD_AWS_ACCESS_KEY_ID OLD_AWS_SECRET_ACCESS_KEY OLD_AWS_SESSION_TOKEN  # Ensure exportability
          echo "Original credentials captured."
        fi

        # Assume the role and capture temporary credentials
        ROLE_CREDS=$(aws sts assume-role --role-arn arn:aws:iam::{{ aws_account_id }}:role/om-devops-terraform-role --role-session-name eks-cluster-cred)

        # Set temporary credentials as environment variables
        export AWS_ACCESS_KEY_ID=$(echo $ROLE_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $ROLE_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $ROLE_CREDS | jq -r '.Credentials.SessionToken')

        # Update kubeconfig with temporary credentials
        aws eks update-kubeconfig --name {{ aws_eks_cluster_name }} --region {{ region }}

        # "Delete the aws-node daemon set to disable AWS VPC networking for pods"
        kubectl delete daemonset -n kube-system aws-node

        # "Install calico manifest"
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico-vxlan.yaml

        # Configure Calico to disable AWS src/dst checks"
        kubectl -n kube-system set env daemonset/calico-node FELIX_AWSSRCDSTCHECK=Disable

        # Create calico custom ippool
        sed -e 's|##IPPOOL-CIDR-RANGE##|{{ calico_ippool_cidr_range }}|g' custom-ippool.yml | calicoctl apply -f -

        # update calico default ippool"
        calicoctl apply -f default-ippool.yml

        # Run script to restart deployments/DaemonSets
        sh deployment-restart.sh


        # Execute the script script to configure original aws credentials to provision infra

        # Reset credentials to original values (if captured earlier)
        if [[ -n "$OLD_AWS_ACCESS_KEY_ID" && -n "$OLD_AWS_SECRET_ACCESS_KEY" ]]; then
          export AWS_ACCESS_KEY_ID="$OLD_AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$OLD_AWS_SECRET_ACCESS_KEY"
          export AWS_SESSION_TOKEN="$OLD_AWS_SESSION_TOKEN"
          echo "Original credentials restored."
        else
          echo "No original credentials found to restore."
        fi

      register: script_result
    - debug:
        msg: "Script output: {{ script_result.stdout }}"
      loop: "{{ script_result.stdout.splitlines() }}"
